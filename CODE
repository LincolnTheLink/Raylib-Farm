#include "raylib.h"
#include <stdio.h>
#include <time.h>

#define SCREEN_WIDTH 800
#define SCREEN_HEIGHT 600

int quantidade[4][3] = {0};
int graosPlantados = 0;
int dinheiro = 500;

bool plantationMenuOpen = false;

float incomeTimer = 0;

void DrawGrassBackground(void);
void DrawVerticalGradientRect(float x, float y, float width, float height, Color topColor, Color bottomColor);
void DrawShopMenu(Rectangle menuArea, bool *shopOpen, float *scrollOffset);
void DrawBarnPopup(Rectangle area, bool *barnPopupOpen, float *scrollOffset);
void DrawPlantationMenu(Rectangle area, bool *plantationMenuOpen);

int main() {
    InitWindow(SCREEN_WIDTH, SCREEN_HEIGHT, "FARMVILLE 2.0");
    SetTargetFPS(60);

    Image mapImage = LoadImage("resources/farm_map.png");

    if (mapImage.data == NULL) {
        printf("Erro ao carregar a imagem! Verifique o caminho e o nome do arquivo.\n");
        CloseWindow();
        return 1;
    }

    ImageResize(&mapImage, 800, 600);
    Texture2D mapTexture = LoadTextureFromImage(mapImage);
    UnloadImage(mapImage);

    Rectangle marketArea = {SCREEN_WIDTH/2 - 70, SCREEN_HEIGHT - 130, 90, 90};
    Rectangle barnArea = {marketArea.x + 150, marketArea.y - 400, 90, 90};
    Rectangle plantationArea = {marketArea.x - 225, marketArea.y - 440, 110, 120};

    bool shopOpen = false;
    bool barnPopupOpen = false;
    float shopScrollOffset = 0;
    float barnScrollOffset = 0;

    while (!WindowShouldClose()) {
        float delta = GetFrameTime();
        incomeTimer += delta;

        if (incomeTimer >= 1.0f) {
            int ganhoPorSegundo = graosPlantados * 0.1;  // ganho forte por grão plantado
            dinheiro += ganhoPorSegundo;
            if (dinheiro > 999999) dinheiro = 999999;
            incomeTimer = 0;
        }

        BeginDrawing();
        ClearBackground(RAYWHITE);

        DrawGrassBackground();

        Vector2 mapPos = {
            (SCREEN_WIDTH - mapTexture.width) / 2.0f,
            (SCREEN_HEIGHT - mapTexture.height) / 2.0f
        };
        DrawTexture(mapTexture, (int)mapPos.x, (int)mapPos.y, WHITE);

        // Áreas clicáveis para debug (invisíveis)
        DrawRectangleLinesEx(marketArea, 2, (Color){0,0,0,0});
        DrawRectangleLinesEx(barnArea, 2, (Color){0,0,0,0});
        DrawRectangleLinesEx(plantationArea, 2, (Color){0,0,0,0});

        DrawText(TextFormat("Dinheiro: $%d", dinheiro), 20, 20, 20, YELLOW);

        if (CheckCollisionPointRec(GetMousePosition(), marketArea) && IsMouseButtonPressed(MOUSE_LEFT_BUTTON)) {
            shopOpen = true;
        }

        if (CheckCollisionPointRec(GetMousePosition(), barnArea) && IsMouseButtonPressed(MOUSE_LEFT_BUTTON)) {
            barnPopupOpen = !barnPopupOpen;
        }

        if (CheckCollisionPointRec(GetMousePosition(), plantationArea) && IsMouseButtonPressed(MOUSE_LEFT_BUTTON)) {
            plantationMenuOpen = true;
        }

        if (shopOpen) {
            Rectangle menuArea = {150, 80, 500, 440};
            DrawShopMenu(menuArea, &shopOpen, &shopScrollOffset);
        }

        if (barnPopupOpen) {
            Rectangle barnPopupArea = {barnArea.x, barnArea.y - 10, 300, 350};
            DrawBarnPopup(barnPopupArea, &barnPopupOpen, &barnScrollOffset);
        }

        if (plantationMenuOpen) {
            Rectangle plantationMenuArea = {plantationArea.x, plantationArea.y - 10, 300, 150};
            DrawPlantationMenu(plantationMenuArea, &plantationMenuOpen);
        }

        EndDrawing();
    }

    UnloadTexture(mapTexture);
    CloseWindow();
    return 0;
}

void DrawGrassBackground(void) {
    DrawVerticalGradientRect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT,
                             (Color){160, 220, 120, 255}, (Color){50, 120, 50, 255});
}

void DrawVerticalGradientRect(float x, float y, float width, float height,
                              Color topColor, Color bottomColor) {
    int steps = (int)height;
    for (int i = 0; i < steps; i++) {
        float t = (float)i / (steps - 1);
        Color c = {
            (unsigned char)((1 - t) * topColor.r + t * bottomColor.r),
            (unsigned char)((1 - t) * topColor.g + t * bottomColor.g),
            (unsigned char)((1 - t) * topColor.b + t * bottomColor.b),
            (unsigned char)((1 - t) * topColor.a + t * bottomColor.a)
        };
        DrawRectangle(x, y + i, width, 1, c);
    }
}

void DrawShopMenu(Rectangle menuArea, bool *shopOpen, float *scrollOffset) {
    const char *categories[] = {"Carnes", "Frutas", "Subprodutos", "Derivados"};
    const char *items[][3] = {
        {"Carne Bovina", "Carne Suína", "Frango"},
        {"Maçã", "Banana", "Uva"},
        {"Mel", "Ovos", "Grãos"},
        {"Queijo", "Manteiga", "Iogurte"}
    };
    int categoryCount = sizeof(categories) / sizeof(categories[0]);

    float wheel = GetMouseWheelMove();
    *scrollOffset += wheel * 20.0f;

    float totalHeight = 0;
    for (int c = 0; c < categoryCount; c++) {
        totalHeight += 25 + 3 * 35 + 10;
    }

    float maxOffset = 0;
    float minOffset = -(totalHeight - (menuArea.height - 70));
    if (*scrollOffset > maxOffset) *scrollOffset = maxOffset;
    if (*scrollOffset < minOffset) *scrollOffset = minOffset;

    DrawRectangleRec(menuArea, (Color){245, 222, 179, 255});
    DrawRectangleLinesEx(menuArea, 3, BROWN);
    DrawText("Loja da Fazenda", menuArea.x + 90, menuArea.y + 10, 20, DARKGREEN);

    BeginScissorMode(menuArea.x + 5, menuArea.y + 45, menuArea.width - 10, menuArea.height - 55);
    float yOffset = menuArea.y + 50 + *scrollOffset;

    for (int c = 0; c < categoryCount; c++) {
        DrawText(categories[c], menuArea.x + 20, yOffset, 18, DARKBROWN);
        yOffset += 25;

        for (int i = 0; i < 3; i++) {
            Rectangle itemBtn = {menuArea.x + 20, yOffset, menuArea.width - 40, 30};

            DrawRectangleRec(itemBtn, LIGHTGRAY);
            DrawRectangleLinesEx(itemBtn, 1, GRAY);
            DrawText(items[c][i], itemBtn.x + 10, itemBtn.y + 6, 16, BLACK);

            if (CheckCollisionPointRec(GetMousePosition(), itemBtn) && IsMouseButtonPressed(MOUSE_LEFT_BUTTON)) {
                // Só compra se tiver dinheiro suficiente
                if (dinheiro >= 5) {
                    quantidade[c][i]++;
                    dinheiro -= 5;
                    printf("Comprou: %s (Qtd: %d)\n", items[c][i], quantidade[c][i]);
                }
            }
            yOffset += 35;
        }
        yOffset += 10;
    }
    EndScissorMode();

    Rectangle closeBtn = {menuArea.x + menuArea.width - 30, menuArea.y + 10, 20, 20};
    DrawRectangleRec(closeBtn, RED);
    DrawText("X", closeBtn.x + 5, closeBtn.y + 2, 16, WHITE);
    if (CheckCollisionPointRec(GetMousePosition(), closeBtn) && IsMouseButtonPressed(MOUSE_LEFT_BUTTON)) {
        *shopOpen = false;
    }
}

void DrawBarnPopup(Rectangle area, bool *barnPopupOpen, float *scrollOffset) {
    DrawRectangleRec(area, (Color){220, 220, 220, 240});
    DrawRectangleLinesEx(area, 3, DARKGRAY);
    DrawText("Inventário no Celeiro", area.x + 20, area.y + 10, 20, DARKGREEN);

    Rectangle closeBtn = {area.x + area.width - 30, area.y + 10, 20, 20};
    DrawRectangleRec(closeBtn, RED);
    DrawText("X", closeBtn.x + 5, closeBtn.y + 2, 16, WHITE);
    if (CheckCollisionPointRec(GetMousePosition(), closeBtn) && IsMouseButtonPressed(MOUSE_LEFT_BUTTON)) {
        *barnPopupOpen = false;
    }

    const char *categories[] = {"Carnes", "Frutas", "Subprodutos", "Derivados"};
    const char *items[][3] = {
        {"Carne Bovina", "Carne Suína", "Frango"},
        {"Maçã", "Banana", "Uva"},
        {"Mel", "Ovos", "Grãos"},
        {"Queijo", "Manteiga", "Iogurte"}
    };

    float wheel = GetMouseWheelMove();
    *scrollOffset += wheel * 20.0f;

    int contentHeight = 0;
    for (int c = 0; c < 4; c++) {
        contentHeight += 25 + 3 * 22 + 10;
    }

    float maxOffset = 0;
    float minOffset = -(contentHeight - (area.height - 50));
    if (*scrollOffset > maxOffset) *scrollOffset = maxOffset;
    if (*scrollOffset < minOffset) *scrollOffset = minOffset;

    BeginScissorMode(area.x + 10, area.y + 45, area.width - 20, area.height - 55);
    float yOffset = area.y + 50 + *scrollOffset;

    for (int c = 0; c < 4; c++) {
        DrawText(categories[c], area.x + 20, yOffset, 18, DARKBROWN);
        yOffset += 25;
        for (int i = 0; i < 3; i++) {
            char buffer[50];
            snprintf(buffer, sizeof(buffer), "%s: %d", items[c][i], quantidade[c][i]);
            DrawText(buffer, area.x + 30, yOffset, 16, BLACK);
            yOffset += 22;
        }
        yOffset += 10;
    }
    EndScissorMode();
}

void DrawPlantationMenu(Rectangle area, bool *plantationMenuOpen) {
    DrawRectangleRec(area, (Color){200, 250, 200, 255});
    DrawRectangleLinesEx(area, 3, DARKGREEN);
    DrawText("Plantação de Grãos", area.x + 20, area.y + 10, 18, DARKGREEN);

    Rectangle closeBtn = {area.x + area.width - 30, area.y + 10, 20, 20};
    DrawRectangleRec(closeBtn, RED);
    DrawText("X", closeBtn.x + 5, closeBtn.y + 2, 16, WHITE);
    if (CheckCollisionPointRec(GetMousePosition(), closeBtn) && IsMouseButtonPressed(MOUSE_LEFT_BUTTON)) {
        *plantationMenuOpen = false;
    }

    Rectangle plantBtn = {area.x + 20, area.y + 50, area.width - 40, 30};
    DrawRectangleRec(plantBtn, LIGHTGRAY);
    DrawRectangleLinesEx(plantBtn, 1, DARKGREEN);
    DrawText("Plantar Grão (+1) - Usa 1 grão do inventário", plantBtn.x + 10, plantBtn.y + 5, 14, BLACK);

    if (CheckCollisionPointRec(GetMousePosition(), plantBtn) && IsMouseButtonPressed(MOUSE_LEFT_BUTTON)) {
        // Só planta se tiver grãos no inventário
        if (quantidade[2][2] > 0) {
            quantidade[2][2]--;   // diminui do inventário
            graosPlantados++;     // aumenta plantação
            printf("Plantar grão! Plantados: %d, Inventário: %d\n", graosPlantados, quantidade[2][2]);
        }
    }

    char info[50];
    sprintf(info, "Grãos plantados: %d", graosPlantados);
    DrawText(info, area.x + 20, area.y + 95, 16, DARKBROWN);
}
